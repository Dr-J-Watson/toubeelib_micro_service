volumes:
  toubeelib.db:
    driver: local
  app_praticiens.db:
    driver: local
  app_rdv.db:
    driver: local
  app_patients.db:
    driver: local
  app_auth.db:
    driver: local
  app_mail:
    driver: local

services:

  # ===================MESSAGE BROKER================
  rabbitmq:
    image: rabbitmq:4-management
    ports:
      - '15672:15672'
      - '5672:5672'
    volumes:
      - ./rabbitmq_dir:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 8s
      timeout: 30s
      retries: 3

  # service administration des bases de donn√©es
  adminer:
    image: adminer
    ports:
      - '8080:8080'

  # service smtp de test
  mailcatcher:
    image: dockage/mailcatcher:latest
    ports:
      - "1025:1025"
      - "1080:1080"

  mail:
    build:
      context: build
      dockerfile: 8.3-cli.Dockerfile
    volumes:
      - ./app_mail:/var/php/
    working_dir: /var/php
    depends_on:
      - rabbitmq
      - mailcatcher
    command: php consumer.php
  # ===================GATEWAY================

  gateway:
    build:
      context: build
      dockerfile: 8.3-cli.Dockerfile
    ports:
      - '6080:80'
    volumes:
      - ./gateway/app/:/var/php/
    working_dir: /var/php
    command: php -S 0.0.0.0:80 -t /var/php/public

  # ==============TOUBEELIB================

  api.toubeelib:
    build:
      context: build
      dockerfile: 8.3-cli.Dockerfile
    env_file: ./toubeelib/toubeelib.env
    ports:
      - '6086:80'
    volumes:
      - ./toubeelib/app/:/var/php/
    working_dir: /var/php
    command: php -S 0.0.0.0:80 -t /var/php/public

  db.toubeelib:
    image: 'postgres:latest' 
    env_file: ./env/db.env
    ports:
      - '5432:5432'
    volumes:
      - ./toubeelib/sql/init-postgres:/docker-entrypoint-initdb.d
      - toubeelib.db:/var/lib/postgresql/data

  # ===================PRATICIENS================

  api.praticiens:
    build:
      context: build
      dockerfile: 8.3-cli.Dockerfile
    ports:
      - '6081:80'
    volumes:
      - ./app_praticiens/app/:/var/php/
    working_dir: /var/php
    command: php -S 0.0.0.0:80 -t /var/php/public
    depends_on:
      rabbitmq:
        condition: service_healthy

  db.praticiens:
    image: 'postgres:latest'
    env_file: ./env/db.env
    ports:
      - '5433:5432'
    volumes:
      - ./app_praticiens/sql/init-postgres:/docker-entrypoint-initdb.d
      - app_praticiens.db:/var/lib/postgresql/data

  # ===================RDV================

  api.rdv:
     build:
       context: build
       dockerfile: 8.3-cli.Dockerfile
     ports:
       - '6082:80'
     volumes:
       - ./app_rdv/app/:/var/php/
     working_dir: /var/php
     command: php -S 0.0.0.0:80 -t /var/php/public
     env_file:
       - ./env/app_rdv.env
     depends_on:
       rabbitmq:
        condition: service_healthy


  db.rdv:
     image: 'postgres:latest'
     env_file: ./env/db.env
     ports:
       - '5434:5432'
     volumes:
       - ./app_rdv/sql/init-postgres:/docker-entrypoint-initdb.d
       - app_rdv.db:/var/lib/postgresql/data

  # ===================PATIENTS================

  # api.patients:
  #   build:
  #     context: build
  #     dockerfile: 8.3-cli.Dockerfile
  #   ports:
  #     - '6083:80'
  #   volumes:
  #     - ./app_patients/app/:/var/php/
  #   working_dir: /var/php
  #   command: php -S 0.0.0.0:80 -t /var/php/public

  # db.patients:
  #   image: 'postgres:latest' 
  #   env_file: ./env/db.env
  #   ports:
  #     - '5435:5432'
  #   volumes:
  #     - ./app_patients/sql/init-postgres:/docker-entrypoint-initdb.d
  #     - app_patients.db:/var/lib/postgresql/data

  # ===================AUTH================

  api.auth:
    build:
      context: build
      dockerfile: 8.3-cli.Dockerfile
    ports:
      - '6084:80'
    volumes:
      - ./app_auth/app/:/var/php/
    env_file:
      - ./env/api.env
    working_dir: /var/php
    command: php -S 0.0.0.0:80 -t /var/php/public

  db.auth:
    image: 'postgres:latest' 
    env_file: ./env/db.env
    ports:
      - '5436:5432'
    volumes:
      - ./app_auth/sql/init-postgres:/docker-entrypoint-initdb.d
      - app_auth.db:/var/lib/postgresql/data